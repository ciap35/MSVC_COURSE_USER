spring.application.name=msvc-user
server.port=${PORT:8001}
#Local Config
#spring.datasource.url=jdbc:mysql://localhost:3306/msvc_user?serverTimeZone=UTC&allowPublicKeyRetrieval=false
#Docker local config
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/msvc_user?serverTimeZone=UTC&allowPublicKeyRetrieval=false
#Docker hub
spring.datasource.url=jdbc:mysql://${DB_HOST:mysql8:3306}/${DB_DATABASE:msvc_user}?serverTimeZone=UTC&allowPublicKeyRetrieval=false
spring.datasource.username=${DB_USER:root}
spring.datasource.password=${DB_PWD:root}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.generate-ddl=true
logging.level.org.hibernate.SQL=debug
logging.file.path=/app/logs
#msvc.course.url=${COURSE.URL:msvc-course:8002}  Is not necessary since we use service discovery
#NOTE:
#mvn clean package will fail if we aim to a dockerized DB, we must run the command avoiding the tests
#SOLUTION
#.\mvnw clean package -DskipTests
#Then build the docker images
# docker build .
# check if image had been created
# docker image
spring.cloud.kubernetes.secrets.enable-api=true
spring.cloud.kubernetes.discovery.all-namespaces=true
spring.profiles.active=dev
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
